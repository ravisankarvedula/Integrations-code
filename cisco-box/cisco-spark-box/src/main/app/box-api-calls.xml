<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
  	
  	<http:request-config name="HTTP_Access_Token_Request_Configuration" protocol="HTTPS" host="${box.api.access.token.host}" port="${box.api.access.token.port}"  doc:name="HTTP Request Configuration"/>
  	
 	<http:request-config name="HTTP_Operations_Request_Configuration" protocol="HTTPS" host="${box.api.operations.host}" port="${box.api.operations.port}"  doc:name="HTTP Request Configuration"/>
     
    <flow name="postboxTokenFlow">
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <logger message="${box.integration.client.id} ${box.integration.client.secret} #[payload.authSettings.code]  ${box.api.access.token.host}  ${box.api.access.token.port}" level="INFO" doc:name="Logger"/>
        <set-variable variableName="clientid" value="${box.integration.client.id}" doc:name="Variable"/>
        <set-variable variableName="clientsecret" value="${box.integration.client.secret}" doc:name="Variable"/>
        <set-variable variableName="code" value="#[payload.authSettings.code]" doc:name="Variable"/>
        <logger message="#[{'client_id':flowVars.clientid,'client_secret':flowVars.clientsecret,'code':flowVars.code}]" level="INFO" doc:name="Logger"/>
        <set-payload value="#[{'client_id':flowVars.clientid,'client_secret':flowVars.clientsecret,'code':flowVars.code}]" doc:name="Set Payload"/>
        
        <http:request config-ref="HTTP_Access_Token_Request_Configuration" path="${box.api.access.token.path}" method="POST" doc:name="HTTP">
        </http:request>
        
        <dw:transform-message doc:name="Transform Response to Java">
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
    </flow>
    
    <flow name="getboxUserFlow">
    	 <http:request config-ref="HTTP_Operations_Request_Configuration" path="/user" method="GET" doc:name="HTTP" host="${box.api.operations.host}" port="${box.api.operations.port}">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[flowVars.token]"/>
            </http:request-builder>
            <http:success-status-code-validator values="0..599"/>
        </http:request>
        
        <dw:transform-message doc:name="Transform Response to Java">
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
    </flow>
    
	<flow name="getboxRepositoriesFlow">
    	 <http:request config-ref="HTTP_Operations_Request_Configuration" path="/user/repos" method="GET" doc:name="HTTP" host="${box.api.operations.host}" port="${box.api.operations.port}">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[flowVars.token]"/>
            </http:request-builder>
            <http:success-status-code-validator values="0..599"/>
        </http:request>
        
        <dw:transform-message doc:name="Transform Response to Java">
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
    </flow>
    
    <flow name="postboxHookFlow">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <logger message="Access token #[flowVars.token]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="user" value="#[json:configJson/owner_name]" doc:name="user"/>
        <set-variable variableName="repo" value="#[json:configJson/repo_name]" doc:name="repo"/>
        <set-variable variableName="instance_id" value="#[java.util.UUID.randomUUID().toString()]" doc:name="instance_id"/>
        <set-variable variableName="notificat" value="#[json:configJson/notifications]" doc:name="notifications" mimeType="application/json"/>
        <logger message="#[flowVars.repo]notifications::::::::#[flowVars.notificat]   #[flowVars.token]" level="INFO" doc:name="Logger"/>
        <set-payload value="#[json:configJson]" doc:name="Set Payload"/>
        <object-to-string-transformer returnClass="java.lang.String" doc:name="Object to String"/>
        <scripting:component doc:name="JavaScript">
            <scripting:script engine="JavaScript"><![CDATA[ var arr = JSON.parse(payload);
         var replyData={};
        var replyEvents=[];
		if(arr) {
		var notfications =arr.notifications;
		if(notfications) {
		var obj = notfications.events;
		if(obj){
		if(Object.prototype.toString.call(obj) === '[object Array]'){
       for(var i=0;i<obj.length;i++){
         var str =  '"'+ obj[i]+'"';
          replyEvents.push(str);
      }
      }else{
      replyEvents.push(obj)
      }
	  }
	 
	  }
        }
        replyData.events = replyEvents;
        
        message.setPayload(replyData);
        result = message;]]></scripting:script>
        </scripting:component>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="events atrer scripttt=====#[json:events]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="notifications_events" value="#[json:events]" doc:name="notifications_events"/>
        <logger message="To Generate Webhook Webhook {&quot;name&quot;:&quot;web&quot;,&quot;config&quot;:{&quot;url&quot;: &quot;http://183.82.99.100:8088/hooks/spark/github/#[flowVars.instance_id]&quot;,&quot;content_type&quot;:&quot;json&quot;},&quot;active&quot;: true,&quot;events&quot;:#[flowVars.notifications_events]}" level="INFO" doc:name="Logger"/>
        <set-variable variableName="data" value="{&quot;name&quot;:&quot;web&quot;,&quot;config&quot;:{&quot;url&quot;: &quot;http://183.82.99.100:8088/hooks/spark/github/#[flowVars.instance_id]&quot;,&quot;content_type&quot;:&quot;json&quot;},&quot;active&quot;: true,&quot;events&quot;:#[flowVars.notifications_events]}" doc:name="Variable"/>
        <set-payload value="#[data]" doc:name="Set Payload"/>
        <logger message="data for webhook#[flowVars.data]====url to create webhook /repos/#[flowVars.user]/#[flowVars.repo]/hooks #[flowVars.token]" level="INFO" doc:name="Logger"/>
        <http:request config-ref="HTTP_Operations_Request_Configuration" path="/repos/#[flowVars.user]/#[flowVars.repo]/hooks" method="POST" doc:name="HTTP" host="${box.api.operations.host}" port="${box.api.operations.port}">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[flowVars.token]"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
            <http:success-status-code-validator values="0..599"/>
        </http:request>
        <byte-array-to-string-transformer returnClass="java.lang.String" doc:name="Byte Array to String"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    
    <flow name="putboxHookFlow">
        <logger message="#[json:accessToken]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="token" value="#[json:accessToken]" doc:name="token"/>
        <set-variable variableName="user" value="#[json:settings/username]" doc:name="user"/>
        <set-variable variableName="repo" value="#[json:settings/reponame]" doc:name="repo"/>
        <set-variable variableName="instance_id" value="#[java.util.UUID.randomUUID().toString()]" doc:name="instance_id"/>
        <logger level="INFO" doc:name="Logger" message="#[flowVars.notifications]"/>
        <set-payload value="#[json:settings]" doc:name="Set Payload"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <scripting:component doc:name="JavaScript">
            <scripting:script engine="JavaScript"><![CDATA[ var arr = JSON.parse(payload);
         var replyData={};
        var replyEvents=[];
		if(arr) {
		var notfications =arr.notifications;
		if(notfications) {
		var obj = notfications.events;
		if(obj){
		if(Object.prototype.toString.call(obj) === '[object Array]'){
       for(var i=0;i<obj.length;i++){
         var str =  '"'+ obj[i]+'"';
          replyEvents.push(str);
      }
      }else{
      replyEvents.push(obj)
      }
	  }
	 
	  }
        }
        replyData.events = replyEvents;
        
        message.setPayload(replyData);
        result = message;]]></scripting:script>
        </scripting:component>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="#[json:events]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="notifications_events" value="#[json:events]" doc:name="notifications_events"/>
        <set-variable variableName="data" value="{&quot;name&quot;:&quot;web&quot;,&quot;config&quot;:{&quot;url&quot;: &quot;http://183.82.99.100:8088/hooks/spark/github/#[flowVars.instance_id]&quot;,&quot;content_type&quot;:&quot;json&quot;},&quot;active&quot;: true,&quot;events&quot;:#[flowVars.notifications_events]}" doc:name="Variable"/>
        <set-payload value="#[data]" doc:name="Set Payload"/>
    	 <http:request config-ref="HTTP_Operations_Request_Configuration" path="/repos/#[flowVars.user]/#[flowVars.repo]/hooks/{webhook-id}" method="PATCH" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[flowVars.token]"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
        </http:request>
        <byte-array-to-string-transformer returnClass="java.lang.String" doc:name="Byte Array to String"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        
        <dw:transform-message doc:name="Transform Response to Java">
            <dw:set-payload resource="classpath:dwScripts/fromPayloadToJava.dwl"/>
        </dw:transform-message>
    </flow>
    <flow name="listBranchesForRepositories">
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <http:request config-ref="HTTP_Operations_Request_Configuration" path="/repos/#[payload.settings.username]/#[payload.settings.reponame]/branches" method="GET" host="api.github.com" port="443" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[payload.accessToken]"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
            <http:success-status-code-validator values="0..599"/>
        </http:request>
        <byte-array-to-string-transformer returnClass="java.lang.String" doc:name="Byte Array to String"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="postmessage">
        <logger message="#[flowVars.mess]" level="INFO" doc:name="Logger"/>
        <logger message="#[flowVars.mess.repository.stargazers_count]#[flowVars.mess.deployment_status] #[flowVars.mess.deployment] #[flowVars.mess.sha]#[payload]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.mess.deployment_status!=empty]">
                <logger message="enterd into Deployment status" level="INFO" doc:name="Deployment staus"/>
                <set-variable variableName="abcd" value="#[flowVars.mess.deployment.sha]" doc:name="Variable"/>
                <expression-component doc:name="Expression"><![CDATA[flowVars.abcd = flowVars.abcd.toString().substring(0,10);]]></expression-component>
                <set-variable variableName="messag" value="#[flowVars.mess.deployment.creator.login](#[flowVars.mess.deployment.creator.html_url]) is deploying #[flowVars.mess.repository.full_name](#[flowVars.mess.repository.html_url]) (#[flowVars.abcd]) to #[flowVars.mess.deployment.environment]:Finished successfulley--&gt;#[flowVars.mess.deployment_status.target_url]" doc:name="Deployment Variable"/>
            </when>
            <when expression="#[flowVars.mess.deployment!=empty]">
                <logger message="entered into deployment" level="INFO" doc:name="deployment"/>
                <set-variable variableName="abcd" value="#[flowVars.mess.deployment.sha]" doc:name="Variable"/>
                <expression-component doc:name="Expression"><![CDATA[flowVars.abcd = flowVars.abcd.toString().substring(0,10);]]></expression-component>
                <set-variable variableName="messag" value="#[flowVars.mess.deployment.creator.login](#[flowVars.mess.deployment.creator.html_url]) is deploying #[flowVars.mess.repository.full_name](#[flowVars.mess.repository.html_url]) (#[flowVars.abcd]) to #[flowVars.mess.deployment.environment]" doc:name="Variable"/>
            </when>
            <when expression="#[flowVars.mess.sha!=empty]">
                <logger message="status changed from api " level="INFO" doc:name="status changed from api "/>
                <set-variable variableName="abcd" value="#[flowVars.mess.sha]" doc:name="Variable"/>
                <expression-component doc:name="Expression"><![CDATA[flowVars.abcd = flowVars.abcd.toString().substring(0,10);]]></expression-component>
                <set-variable variableName="messag" value="Build for #[flowVars.mess.repository.full_name](#[flowVars.mess.repository.html_url]) ((#[flowVars.abcd])) finished successfully --&gt;#[flowVars.mess.target_url]" doc:name="Variable"/>
            </when>
            <when expression="#[flowVars.mess.member!=empty]">
                <logger message="entered into member added" level="INFO" doc:name="entered into member added"/>
                <set-variable variableName="messag" value="#[flowVars.mess.member.login] (#[flowVars.mess.member.html_url]) added #[flowVars.mess.sender.login](#[flowVars.mess.sender.html_url])as a collaborator to #[flowVars.mess.repository.full_name](#[flowVars.mess.repository.html_url])" doc:name="Variable"/>
            </when>
            <when expression="#[flowVars.mess.release!=empty]">
                <logger message="relesed" level="INFO" doc:name="released"/>
                <set-variable variableName="messag" value="#[flowVars.mess.sender.login](#[flowVars.mess.sender.html_url])  published a new release for  #[flowVars.mess.repository.full_name](#[flowVars.mess.repository.html_url])  #[flowVars.mess.release.name](#[flowVars.mess.release.html_url])#[flowVars.mess.release.body]" doc:name="Variable"/>
            </when>
            <when expression="#[flowVars.mess.forkee!=empty]">
                <logger message="Fokkee" level="INFO" doc:name="Fokkee"/>
                <set-variable variableName="messag" value="#[flowVars.mess.forkee.owner.login](#[flowVars.mess.forkee.owner.html_url])forked #[flowVars.mess.repository.full_name] to #[flowVars.mess.forkee.full_name]" doc:name="Forked Variable"/>
            </when>
            <when expression="#[flowVars.mess.repository.stargazers_count&gt;0]">
                <logger message="Starred" level="INFO" doc:name="Starred"/>
                <set-variable variableName="messag" value="#[flowVars.mess.repository.owner.login](#[flowVars.mess.repository.owner.html_url]) starred #[flowVars.mess.repository.name](#[flowVars.mess.repository.html_url]) number of stars  #[flowVars.mess.repository.stargazers_count]" doc:name="starred Variable"/>
            </when>
            <when expression="#[flowVars.mess.pull_request!=empty]">
                <logger message="pull request created or deleted" level="INFO" doc:name="pull request created or deleted"/>
                <logger message="#[flowVars.mess.pull_request.user.login](#[flowVars.mess.pull_request.user.html_url]) github pull request:#[flowVars.mess.action] #[flowVars.mess.pull_request.title] (#[flowVars.mess.pull_request.html_url]) pull request state is :#[flowVars.mess.pull_request.state]" level="INFO" doc:name="Logger"/>
                <set-variable variableName="messag" value="#[flowVars.mess.pull_request.user.login](#[flowVars.mess.pull_request.user.html_url]) github pull request:#[flowVars.mess.action] #[flowVars.mess.pull_request.title] (#[flowVars.mess.pull_request.html_url]) pull request state is :#[flowVars.mess.pull_request.state]" doc:name="pull request Variable"/>
            </when>
            <when expression="#[flowVars.mess.ref!=empty]">
                <choice doc:name="push or branch">
                    <when expression="#[flowVars.mess.ref_type!=empty]">
                        <logger message="branch creted" level="INFO" doc:name="branch creted"/>
                        <logger message="#[flowVars.mess.repository.owner.login] (#[flowVars.mess.repository.owner.html_url]) created branch in github #[flowVars.mess.ref](#[flowVars.mess.repository.html_url]/tree/#[flowVars.mess.ref]) of repository: #[flowVars.mess.repository.name] (#[flowVars.mess.repository.html_url])" level="INFO" doc:name="Logger"/>
                        <set-variable variableName="messag" value="#[flowVars.mess.repository.owner.login] (#[flowVars.mess.repository.owner.html_url]) created branch in github #[flowVars.mess.ref](#[flowVars.mess.repository.html_url]/tree/#[flowVars.mess.ref]) of repository: #[flowVars.mess.repository.name] (#[flowVars.mess.repository.html_url])" doc:name="branch created Variable"/>
                    </when>
                    <otherwise>
                        <choice doc:name="Branch creted or delted">
                            <when expression="#[flowVars.mess.deleted!=true]">
                                <logger message="pusher" level="INFO" doc:name="pusher"/>
                                <logger message="#[flowVars.mess.pusher.name](#[flowVars.mess.sender.html_url]) pusher repository #[flowVars.mess.repository.name] (#[flowVars.mess.repository.html_url])" level="INFO" doc:name="Logger"/>
                                <set-variable variableName="messag" value="#[flowVars.mess.pusher.name](#[flowVars.mess.sender.html_url]) pusher repository #[flowVars.mess.repository.name] (#[flowVars.mess.repository.html_url])" doc:name="pusher Variable"/>
                            </when>
                            <otherwise>
                                <logger message="Branch deleted" level="INFO" doc:name="Branch deleted"/>
                                <logger message="#[flowVars.mess.repository.owner.name] (#[flowVars.mess.repository.owner.html_url]) delted branch in github #[flowVars.mess.ref] of repository: #[flowVars.mess.repository.name] (#[flowVars.mess.repository.html_url])" level="INFO" doc:name="Logger"/>
                                <set-variable variableName="messag" value="#[flowVars.mess.repository.name] (#[flowVars.mess.repository.html_url]) delted branch in github #[flowVars.mess.ref] of repository: #[flowVars.mess.repository.name] (#[flowVars.mess.repository.html_url])" doc:name="branch deleted Variable"/>
                            </otherwise>
                        </choice>
                    </otherwise>
                </choice>
            </when>
            <when expression="#[flowVars.mess.comment!=empty]">
                <choice doc:name="issue comment or pull comment">
                    <when expression="#[flowVars.mess.issue.pull_request!=empty]">
                        <logger message="pull request comment flow" level="INFO" doc:name="pull request comment flow"/>
                        <logger message="#[flowVars.mess.issue.user.login] (#[flowVars.mess.issue.user.html_url]) in github pull request comment is #[flowVars.mess.action]  for #[flowVars.mess.issue.title] #[flowVars.mess.issue.html_url]  repository #[flowVars.mess.repository.name](#[flowVars.mess.repository.html_url]) description:#[flowVars.mess.comment.body] (#[flowVars.mess.comment.html_url]) " level="INFO" doc:name="Logger"/>
                        <set-variable variableName="messag" value="#[flowVars.mess.issue.user.login] (#[flowVars.mess.issue.user.html_url]) in github pull request comment is #[flowVars.mess.action]  for #[flowVars.mess.issue.title] #[flowVars.mess.issue.html_url]  repository #[flowVars.mess.repository.name](#[flowVars.mess.repository.html_url]) description:#[flowVars.mess.comment.body] (#[flowVars.mess.comment.html_url]) " doc:name="pull request commen Variable"/>
                    </when>
                    <otherwise>
                        <logger message="issue comment flow" level="INFO" doc:name="issue comment flow"/>
                        <logger message="#[flowVars.mess.issue.user.login](#[flowVars.mess.issue.user.html_url])  commented : #[flowVars.mess.action] on issue #[flowVars.mess.issue.title]   issue id:#[flowVars.mess.issue.id] (#[flowVars.mess.issue.html_url]) repository name:#[flowVars.mess.repository.name](#[flowVars.mess.repository.html_url]) comment description:#[flowVars.mess.comment.body]" level="INFO" doc:name="Logger"/>
                        <set-variable variableName="messag" value="#[flowVars.mess.issue.user.login](#[flowVars.mess.issue.user.html_url])  commented : #[flowVars.mess.action] on issue #[flowVars.mess.issue.title]   issue id:#[flowVars.mess.issue.id] (#[flowVars.mess.issue.html_url]) repository name:#[flowVars.mess.repository.name](#[flowVars.mess.repository.html_url]) comment description:#[flowVars.mess.comment.body]" doc:name="issue comment Variable"/>
                    </otherwise>
                </choice>
            </when>
            <when expression="#[flowVars.mess.hook!=empty]">
                <logger message="Hook successfulley configured" level="INFO" doc:name="Logger"/>
                <set-variable variableName="messag" value="Hook successfulley configured" doc:name="Hook Variable"/>
            </when>
            <when expression="#[flowVars.mess.team!=empty]">
                <logger message="Teamadded Flow" level="INFO" doc:name="Teamadded Flow"/>
                <set-variable variableName="messag" value="#[flowVars.mess.team.name] has been added to #[flowVars.mess.repository.full_name](#[flowVars.mess.repository.html_url])" doc:name="Team add Variable"/>
            </when>
            <when expression="">
                <logger message="Wiki" level="INFO" doc:name="Wiki"/>
                <set-variable variableName="messag" value="#[flowVars.mess.repository.owner.login](#[flowVars.mess.repository.owner.html_url]) created #[flowVars.mess.pages[0].page_name] in #[flowVars.mess.repository.name](#[flowVars.mess.repository.html_url]))" doc:name="Wiki Variable"/>
            </when>
            <otherwise>
                <logger message="entered into default logger" level="INFO" doc:name="Default"/>
                <set-variable variableName="messag" value="#[flowVars.mess.issue.user.login](#[flowVars.mess.issue.user.html_url])   #[flowVars.mess.action] github issue name: #[flowVars.mess.issue.title] (#[flowVars.mess.issue.html_url]) issue id:#[flowVars.mess.issue.id] repository name:#[flowVars.mess.repository.name](#[flowVars.mess.repository.html_url])" doc:name="Variable"/>
            </otherwise>
        </choice>
        <logger message="#[flowVars.messag]" level="INFO" doc:name="Logger"/>
    
    
    
    </flow>
    
    <flow name="deleteboxHookFlow">
        <logger message="#[payload.accessToken]#[payload.settings.reponame]#[payload.settings.username]#[payload.settings.id]" level="INFO" doc:name="Logger"/>
    	 <http:request config-ref="HTTP_Operations_Request_Configuration" path="/repos/#[payload.settings.username]/#[payload.settings.reponame]/hooks/#[payload.settings.id]" method="DELETE" doc:name="HTTP" host="api.github.com" port="443">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[payload.accessToken]"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
            <http:success-status-code-validator values="0..599"/>
        </http:request>
        <byte-array-to-string-transformer returnClass="java.lang.String" doc:name="Byte Array to String"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="#[payload]Delted  " level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
    </flow>
</mule>
